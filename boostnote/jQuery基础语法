# jQuery基础语法
#### 基本选择器
> id选择器
`$(#id)`

> 标签选择器
>`$("div")`

>class选择器
>`$(".c1")`

>配合使用
>`$("div.c1")  // 找到有c1 class类的div标签`
>

>所有元素选择器
>`$("*")`

>组合选择器
>`$("#id, .className, tagName")`

#### 层级选择器
``````
$("x y");// x的所有后代y（子子孙孙）
$("x > y");// x的所有儿子y（儿子）
$("x + y")// 找到所有紧挨在x后面的y
$("x ~ y")// x之后所有的兄弟y
``````

#### 基本筛选器
```python
:first // 第一个
:last // 最后一个
:eq(index)// 索引等于index的那个元素
:even // 匹配所有索引值为偶数的元素，从 0 开始计数
:odd // 匹配所有索引值为奇数的元素，从 0 开始计数
:gt(index)// 匹配所有大于给定索引值的元素
:lt(index)// 匹配所有小于给定索引值的元素
:not(元素选择器)// 移除所有满足not条件的标签
:has(元素选择器)// 选取所有包含一个或多个标签在其内的标签(指的是从后代元素找)
```
列子：
```````
$("div:has(h1)")// 找到所有后代中有h1标签的div标签
$("div:has(.c1)")// 找到所有后代中有c1样式类的div标签
$("li:not(.c1)")// 找到所有不包含c1样式类的li标签
$("li:not(:has(a))")// 找到所有后代中不含a标签的li标签
```````

#### 属性选择器
```python
[attribute]
[attribute=value]// 属性等于
[attribute!=value]// 属性不等于
```
例子
``````
<input type="text">
<input type="password">
<input type="checkbox">
$("input[type='checkbox']");// 取到checkbox类型的input标签
$("input[type!='text']");// 取到类型不是text的input标签
``````

#### 表单筛选器
```
:text
:password
:file
:radio
:checkbox

:submit
:reset
:button
```
`$(":checkbox")  // 找到所有的checkbox`
>表单对象属性
```
:enabled
:disabled
:checked
:selected
```
找到被选中的option：
```python
<select id="s1">
  <option value="beijing">北京市</option>
  <option value="shanghai">上海市</option>
  <option selected value="guangzhou">广州市</option>
  <option value="shenzhen">深圳市</option>
</select>

$(":selected")  // 找到所有被选中的option
```

#### 筛选器方法
>下一个元素
``````
$("#id").next()
$("#id").nextAll()
$("#id").nextUntil("#i2")
``````

>上一个元素
``````
$("#id").prev()
$("#id").prevAll()
$("#id").prevUntil("#i2")
``````

>父亲元素
``````
$("#id").parent()
$("#id").parents()  // 查找当前元素的所有的父辈元素
$("#id").parentsUntil() // 查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止。
``````

>儿子和兄弟元素
```````
$("#id").children();// 儿子们
$("#id").siblings();// 兄弟们
```````

>查找find
>搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法
`$("div").find("p")`
最后找到的是div下的p标签，等价于`$("div p")`

>筛选 filter
>筛选出与指定表达式匹配的元素集合。这个方法用于缩小匹配的范围。用逗号分隔多个表达式
`$("div").filter(".c1")  // 从结果集中过滤出有c1样式类的`
最后找的是div标签，等价于`等价于 $("div.c1")`

```python
.first() // 获取匹配的第一个元素
.last() // 获取匹配的最后一个元素
.not() // 从匹配元素的集合中删除与指定表达式匹配的元素
.has() // 保留包含特定后代的元素，去掉那些不含有指定后代的元素。
.eq() // 索引值等于指定值的元素
```

#### 操作标签
>样式操作
```python
addClass();// 添加指定的CSS类名。
removeClass();// 移除指定的CSS类名。
hasClass();// 判断样式存不存在
toggleClass();// 切换CSS类名，如果有就移除，如果没有就添加。

css("color","red")//DOM操作：tag.style.color="red"
```

>位置操作
```python
offset()// 获取匹配元素在当前窗口的相对偏移或设置元素位置
position()// 获取匹配元素相对父元素的偏移
scrollTop()// 获取匹配元素相对滚动条顶部的偏移
scrollLeft()// 获取匹配元素相对滚动条左侧的偏移
```

>尺寸
```python
height()
width()
innerHeight()
innerWidth()
outerHeight()
outerWidth()
```

#### 文本操作
>HTML代码

```
html()// 取得第一个匹配元素的html内容
html(val)// 设置所有匹配元素的html内容
```

>文本值

```
text()// 取得所有匹配元素的内容
text(val)// 设置所有匹配元素的内容
```

>获取与设置值
```
val()// 取得第一个匹配元素的当前值
val(val)// 设置所有匹配元素的值
val([val1, val2])// 设置多选的checkbox、多选select的值
```

>属性操作
>返回文本信息用arrt，返回布尔值用prop
```python
attr(attrName)// 返回第一个匹配元素的属性值
attr(attrName, attrValue)// 为所有匹配元素设置一个属性值
attr({k1: v1, k2:v2})// 为所有匹配元素设置多个属性值
removeAttr()// 从每一个匹配的元素中删除一个属性
```
#### 文档处理
>在元素内部添加
1. 添加到指定元素内部的后面
```````
$(A).append(B)// 把B追加到A
$(A).appendTo(B)// 把A追加到B
```````
2. 添加到指定元素内部的前面
```````
$(A).prepend(B)// 把B前置到A
$(A).prependTo(B)// 把A前置到B
```````
>在元素外添加
1. 添加到指定元素外部的后面
```````
$(A).after(B)// 把B放到A的后面
$(A).insertAfter(B)// 把A放到B的后面
```````
2. 添加到指定元素外部的前面
```````
$(A).before(B)// 把B放到A的前面
$(A).insertBefore(B)// 把A放到B的前面
```````

>移除和清空元素
```````
remove()// 从DOM中删除所有匹配的元素。
empty()// 删除匹配的元素集合中所有的子节点。
```````

>替换
```
replaceWith() 
replaceAll()
```

>克隆
`clone()// 参数`
